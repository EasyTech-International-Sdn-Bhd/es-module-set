{"version":3,"sources":["index.tsx"],"names":["DeviceEventEmitter","EventRegister","onEventListener","eventName","callback","_Watcher","addListener","addEventListener","eventId","_Listeners","count","remove","refs","emit","emitEvent","data","listenersKey","lookupEvent","removeEventListener","removeAllListeners","on","rm","rmAll","onEvent","EventWatcher"],"mappings":";;AAAA,SAASA,kBAAT,QAAmC,cAAnC;AAQA,eAAe,MAAMC,aAAN,CAAoB;AAMX,SAAfC,eAAe,CAACC,SAAD,EAAoBC,QAApB,EAA+C;AACnEH,IAAAA,aAAa,CAACI,QAAd,CAAuBF,SAAvB,IAAoCH,kBAAkB,CAACM,WAAnB,CAClCH,SADkC,EAElCC,QAFkC,CAApC;AAID;;AACsB,SAAhBG,gBAAgB,CAACJ,SAAD,EAAoBC,QAApB,EAAyC;AAC9D,UAAMI,OAAO,GAAI,KAAIP,aAAa,CAACQ,UAAd,CAAyBC,KAAM,GAAEP,SAAU,EAAhE;AACA,UAAMQ,MAAM,GAAGX,kBAAkB,CAACM,WAAnB,CAA+BE,OAA/B,EAAwCJ,QAAxC,CAAf;AACAH,IAAAA,aAAa,CAACQ,UAAd,CAAyBC,KAAzB;AACAT,IAAAA,aAAa,CAACQ,UAAd,CAAyBG,IAAzB,CAA8BJ,OAA9B,IAAyC;AACvCL,MAAAA,SADuC;AAEvCC,MAAAA,QAFuC;AAGvCO,MAAAA;AAHuC,KAAzC;AAKAX,IAAAA,kBAAkB,CAACa,IAAnB,CAAwBV,SAAxB,EAAmC,IAAnC;AACD;;AACe,SAATW,SAAS,CAACX,SAAD,EAAoBY,IAApB,EAA+B;AAC7C,SAAK,MAAMC,YAAX,IAA2Bf,aAAa,CAACQ,UAAzC,EAAqD;AACnD,YAAM;AAAEN,QAAAA,SAAS,EAAEc;AAAb,UACJhB,aAAa,CAACQ,UAAd,CAAyBG,IAAzB,CAA8BI,YAA9B,CADF;;AAEA,UAAIC,WAAW,KAAKd,SAApB,EAA+B;AAC7BH,QAAAA,kBAAkB,CAACa,IAAnB,CAAwBG,YAAxB,EAAsCD,IAAtC;AACD;AACF;AACF;;AACyB,SAAnBG,mBAAmB,CAACf,SAAD,EAAoB;AAC5C,SAAK,MAAMa,YAAX,IAA2Bf,aAAa,CAACQ,UAAzC,EAAqD;AACnD,UAAIO,YAAY,IAAIf,aAAa,CAACQ,UAAlC,EAA8C;AAC5C,cAAM;AAAEN,UAAAA,SAAS,EAAEc,WAAb;AAA0BN,UAAAA;AAA1B,YACJV,aAAa,CAACQ,UAAd,CAAyBG,IAAzB,CAA8BI,YAA9B,CADF;;AAEA,YAAIC,WAAW,KAAKd,SAApB,EAA+B;AAC7BQ,UAAAA,MAAM,IAAIA,MAAM,EAAhB;;AACA,cAAIR,SAAS,IAAIF,aAAa,CAACI,QAA/B,EAAyC;AACvCJ,YAAAA,aAAa,CAACI,QAAd,CAAuBF,SAAvB,KACEF,aAAa,CAACI,QAAd,CAAuBF,SAAvB,GADF;AAEA,mBAAOF,aAAa,CAACI,QAAd,CAAuBF,SAAvB,CAAP;AACD;;AACD,iBAAOF,aAAa,CAACQ,UAAd,CAAyBG,IAAzB,CAA8BI,YAA9B,CAAP;AACD;AACF;AACF;AACF;;AACwB,SAAlBG,kBAAkB,GAAG;AAC1B,SAAK,MAAMH,YAAX,IAA2Bf,aAAa,CAACQ,UAAzC,EAAqD;AACnD,UAAIO,YAAY,IAAIf,aAAa,CAACQ,UAAlC,EAA8C;AAC5C,cAAM;AAAEN,UAAAA,SAAS,EAAEc;AAAb,YACJhB,aAAa,CAACQ,UAAd,CAAyBG,IAAzB,CAA8BI,YAA9B,CADF;AAEAf,QAAAA,aAAa,CAACiB,mBAAd,CAAkCD,WAAlC;AACD;AACF;AACF;AACD;AACF;AACA;;;AACW,SAAFG,EAAE,CAACjB,SAAD,EAAoBC,QAApB,EAAyC;AAChD,WAAOH,aAAa,CAACM,gBAAd,CAA+BJ,SAA/B,EAA0CC,QAA1C,CAAP;AACD;;AAEQ,SAAFiB,EAAE,CAAClB,SAAD,EAAoB;AAC3B,WAAOF,aAAa,CAACiB,mBAAd,CAAkCf,SAAlC,CAAP;AACD;;AAEW,SAALmB,KAAK,GAAG;AACb,WAAOrB,aAAa,CAACkB,kBAAd,EAAP;AACD;;AAEU,SAAJN,IAAI,CAACV,SAAD,EAAoBY,IAApB,EAA+B;AACxCd,IAAAA,aAAa,CAACa,SAAd,CAAwBX,SAAxB,EAAmCY,IAAnC;AACD;;AAEa,SAAPQ,OAAO,CAACpB,SAAD,EAAoBC,QAApB,EAAyC;AACrD,WAAOH,aAAa,CAACC,eAAd,CAA8BC,SAA9B,EAAyCC,QAAzC,CAAP;AACD;;AA/EgC;;gBAAdH,a,gBACC;AAClBS,EAAAA,KAAK,EAAE,CADW;AAElBE,EAAAA,IAAI,EAAE;AAFY,C;;gBADDX,a,cAKuB,E;;AA4E5C,SAASA,aAAa,IAAIuB,YAA1B","sourcesContent":["import { DeviceEventEmitter } from 'react-native';\ntype ListenerType = {\n  [key: string]: {\n    eventName: string;\n    callback: Function;\n    remove: Function;\n  };\n};\nexport default class EventRegister {\n  static _Listeners = {\n    count: 0,\n    refs: {} as ListenerType,\n  };\n  static _Watcher: { [key: string]: any } = {};\n  static onEventListener(eventName: string, callback: () => any): void {\n    EventRegister._Watcher[eventName] = DeviceEventEmitter.addListener(\n      eventName,\n      callback\n    );\n  }\n  static addEventListener(eventName: string, callback: () => any) {\n    const eventId = `E-${EventRegister._Listeners.count}${eventName}`;\n    const remove = DeviceEventEmitter.addListener(eventId, callback);\n    EventRegister._Listeners.count++;\n    EventRegister._Listeners.refs[eventId] = {\n      eventName,\n      callback,\n      remove,\n    };\n    DeviceEventEmitter.emit(eventName, true);\n  }\n  static emitEvent(eventName: string, data: any) {\n    for (const listenersKey in EventRegister._Listeners) {\n      const { eventName: lookupEvent } =\n        EventRegister._Listeners.refs[listenersKey];\n      if (lookupEvent === eventName) {\n        DeviceEventEmitter.emit(listenersKey, data);\n      }\n    }\n  }\n  static removeEventListener(eventName: string) {\n    for (const listenersKey in EventRegister._Listeners) {\n      if (listenersKey in EventRegister._Listeners) {\n        const { eventName: lookupEvent, remove } =\n          EventRegister._Listeners.refs[listenersKey];\n        if (lookupEvent === eventName) {\n          remove && remove();\n          if (eventName in EventRegister._Watcher) {\n            EventRegister._Watcher[eventName] &&\n              EventRegister._Watcher[eventName]();\n            delete EventRegister._Watcher[eventName];\n          }\n          delete EventRegister._Listeners.refs[listenersKey];\n        }\n      }\n    }\n  }\n  static removeAllListeners() {\n    for (const listenersKey in EventRegister._Listeners) {\n      if (listenersKey in EventRegister._Listeners) {\n        const { eventName: lookupEvent } =\n          EventRegister._Listeners.refs[listenersKey];\n        EventRegister.removeEventListener(lookupEvent);\n      }\n    }\n  }\n  /*\n   * shortener\n   */\n  static on(eventName: string, callback: () => any) {\n    return EventRegister.addEventListener(eventName, callback);\n  }\n\n  static rm(eventName: string) {\n    return EventRegister.removeEventListener(eventName);\n  }\n\n  static rmAll() {\n    return EventRegister.removeAllListeners();\n  }\n\n  static emit(eventName: string, data: any) {\n    EventRegister.emitEvent(eventName, data);\n  }\n\n  static onEvent(eventName: string, callback: () => any) {\n    return EventRegister.onEventListener(eventName, callback);\n  }\n}\nexport { EventRegister as EventWatcher };\n"]}